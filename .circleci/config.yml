version: 2
jobs:
  build:
    # Adapted from https://circleci.com/blog/how-to-build-a-docker-image-on-circleci-2-0/
    working_directory: /app
    docker:
      - image: docker:17.05.0-ce-git
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Install dependencies
          command: |
            apk add --no-cache \
              py-pip=9.0.0-r1
            pip install \
              docker-compose==1.12.0
      - restore_cache:
          keys:
            - v1-{{ .Branch }}
          paths:
            - /caches/app.tar
      - run:
          name: Load Docker image layer cache
          command: |
            set +o pipefail
            docker load -i /caches/app.tar | true
      - run:
          name: Build application Docker image
          command: |
            docker build --cache-from=app -t app .
      - run:
          name: Save Docker image layer cache
          command: |
            mkdir -p /caches
            docker save -o /caches/app.tar app
      - save_cache:
          key: v1-{{ .Branch }}-{{ epoch }}
          paths:
            - /caches/app.tar
  deploy:
    # Adapted from https://circleci.com/blog/how-to-build-a-docker-image-on-circleci-2-0/
    working_directory: /app
    docker:
      - image: google/cloud-sdk
    steps:
      - checkout
      - setup_remote_docker
      - attach_workspace:
        at: .
      - run:
          name: Install dependencies
          command: |
            apt-get install -y python3-pip
            pip install \
              docker-compose==1.12.0 \
              ansible==2.9.0 \
              openshift==0.10.0 \
              kubernetes-validate==1.16.0
      - run:
          name: Load docker image from cache
          command: docker load --input /caches/app.tar
      - run:
          name: Auth gCloud SDK
          command: bash ./deploy/gcloud-auth.sh
      - deploy:
          name: Push application Docker image
          command: |
            if [ "${CIRCLE_BRANCH}" == "deployment" ]; then
              export IMAGE=us.gcr.io/ratom-258217/ratom_api
              export TAG=release-${CIRCLE_SHA1}
              docker tag app "${IMAGE}:${TAG}"
              docker push "${IMAGE}"
              cd deployment/
              ansible-playbook -l gcp-staging deploy.yaml
            fi
